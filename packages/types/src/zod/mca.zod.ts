// Generated by ts-to-zod
import { z } from "zod";

import { vADStateSchema, memoryOperationSchema } from "./common.zod";

export const mCAConfigSchema = z.object({
  l1_max_turns: z.number(),
  l1_max_tokens: z.number(),
  l2_significance_threshold: z.number(),
  l2_emotional_delta_threshold: z.number(),
  l3_vector_dimension: z.number(),
  l3_max_fragments: z.number(),
  default_fusion_weights: z.object({
    w_L1: z.number(),
    w_L2: z.number(),
    w_L3: z.number(),
  }),
  importance_decay_rate: z.number(),
  access_boost_factor: z.number(),
  recency_boost_factor: z.number(),
});

export const detectedEventSchema = z.object({
  type: z.union([
    z.literal("relationship_change"),
    z.literal("fact_assertion"),
    z.literal("emotional_peak"),
    z.literal("conflict"),
    z.literal("resolution"),
  ]),
  confidence: z.number(),
  description: z.string(),
  entities_involved: z.array(z.string()),
});

export const emotionalChangeSchema = z.object({
  character_id: z.string(),
  previous_vad: vADStateSchema,
  new_vad: vADStateSchema,
  delta_magnitude: z.number(),
  trigger: z.string(),
});

export const namedEntitySchema = z.object({
  text: z.string(),
  type: z.union([
    z.literal("PERSON"),
    z.literal("PLACE"),
    z.literal("OBJECT"),
    z.literal("CONCEPT"),
  ]),
  confidence: z.number(),
  start_pos: z.number(),
  end_pos: z.number(),
});

export const significanceScorerSchema = z.object({});

export const memoryIngestionResultSchema = z.object({
  success: z.boolean(),
  operations_performed: z.array(memoryOperationSchema),
  significance_score: z.number(),
  events_detected: z.array(detectedEventSchema),
  emotional_changes: z.array(emotionalChangeSchema),
  facts_updated: z.array(z.string()),
  relationships_modified: z.array(z.string()),
});

export const memoryRetrievalQuerySchema = z.object({
  query_text: z.string(),
  session_id: z.string(),
  fusion_weights: z.object({
    w_L1: z.number(),
    w_L2: z.number(),
    w_L3: z.number(),
  }),
  max_tokens: z.number().optional(),
  min_relevance_threshold: z.number().optional(),
  character_id: z.string().optional(),
});

export const conflictResolutionPolicySchema = z.object({
  strategy: z.union([
    z.literal("latest_wins"),
    z.literal("highest_confidence"),
    z.literal("versioned_history"),
    z.literal("user_prompt"),
  ]),
  confidence_threshold: z.number(),
  max_versions_per_fact: z.number(),
});

export const pruningPolicySchema = z.object({
  enable_pruning: z.boolean(),
  prune_threshold_score: z.number(),
  max_age_days: z.number(),
  preserve_high_importance: z.boolean(),
  archive_before_delete: z.boolean(),
});

export const eventDetectionResultSchema = z.object({
  is_significant: z.boolean(),
  significance_score: z.number(),
  detected_events: z.array(detectedEventSchema),
  emotional_changes: z.array(emotionalChangeSchema),
  named_entities: z.array(namedEntitySchema),
});
